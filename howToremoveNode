// ONLy when Forking a value

// make file called .gitignore
// inside it add node_modules
// then git add .
// check git status, it should not show node files

///- to start the task
// make app.js file
// add the following:
// const express = require("express");
// const app = express();
// const port = 8000;
// and add the following at the buttom
// app.listen(port, () => {
//     console.log(`this is my first BackEnd Server and it is online at ${port}`);
//   });

// in package.json we modify the main file
// "main": "app.js",
// and add    "start": "nodemon app.js",

// to start the task:
//A
// ğŸ¥½ The method you will use is toÂ `GET`

// 1. Create a route toÂ `/accounts`.
// 2. In the response, send theÂ `accounts`Â data, using theÂ `json`Â method because we need to convert it toÂ `json`.
// 3. We also need to send a status code usingÂ `.status`Â method, Which code represents a successful response?
// </aside>

//B
{/* ğŸ›  The method you will use isÂ `POST`

1. You will need to create a route toÂ `/accounts`.
2. Generate anÂ `id`Â for our new account.
3. Create a variableÂ `newAccount`Â to store our new account, pass it the data coming fromÂ `req.body`, theÂ `id`Â we just created and a funds of 0 since it's the default
4. Push yourÂ `newAccount`Â into theÂ `accounts`Â array.
5. Return theÂ `newAccount`Â in the response with the correct status code.
*/}

//C
// The method you will use isÂ `DELETE`

// 1. Create a route toÂ `/accounts`Â that accepts a paramÂ `accountId`.
// 2. Extract this `param` usingÂ `req.params`.
// 3. Find the account with the sameÂ `id`, if it doesn't exist, return a response withÂ `404`Â status code andÂ `not found`Â message.
// 4. If it does exist, filter yourÂ `accounts`Â array to not incldue this deleted account.
// 5. Send a response with the correct status code.